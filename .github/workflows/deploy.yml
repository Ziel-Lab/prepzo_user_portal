name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Determine short SHA
        id: vars
        run: echo "sha_short=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to ECR
        env:
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build \
            --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --build-arg AWS_REGION="${{ secrets.AWS_REGION }}" \
            -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to EC2 with rollback
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            IMAGE_TAG=${{ steps.vars.outputs.sha_short }}
            ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
            ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            CONTAINER_NAME=prepzo-prod
            PORT=5000

            echo "üì¶ Starting deploy for image: $IMAGE_TAG"
            echo "üîê Logging in to ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin $ECR_REGISTRY

            # ‚îÄ‚îÄ 1) Install fuser & lsof if missing ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            if ! command -v fuser &> /dev/null; then
              echo "üîß Installing psmisc (provides fuser)..."
              sudo yum install -y psmisc
            fi
            if ! command -v lsof &> /dev/null; then
              echo "üîß Installing lsof..."
              sudo yum install -y lsof
            fi

            # ‚îÄ‚îÄ 2) Stop & remove the old container (if it exists) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            echo "‚õî Stopping old container (if running)..."
            if docker ps -a --format '{{.Names}}' | grep -qx "$CONTAINER_NAME"; then
              docker rm -f $CONTAINER_NAME || true
              echo "‚úÖ Removed old container: $CONTAINER_NAME"
            else
              echo "‚ÑπÔ∏è No container named $CONTAINER_NAME exists."
            fi

            # ‚îÄ‚îÄ 3) Kill any process on port 5000 with fuser ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            echo "‚ö†Ô∏è Killing any process on port $PORT using fuser..."
            sudo fuser -k ${PORT}/tcp || true

            # ‚îÄ‚îÄ 4) Wait + double‚Äêcheck with lsof that port 5000 is free ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            echo "‚è≥ Waiting up to 10s for port $PORT to free..."
            ATTEMPTS=0
            while lsof -i tcp:$PORT; do
              sleep 2
              ATTEMPTS=$((ATTEMPTS + 1))
              if [ $ATTEMPTS -ge 5 ]; then
                echo "‚ùóÔ∏è Port $PORT still in use after multiple tries. Aborting."
                exit 1
              fi
              echo "‚è≥ Retrying: port $PORT still bound. Attempt $ATTEMPTS/5."
            done
            echo "‚úÖ Port $PORT is now free."

            # ‚îÄ‚îÄ 5) Pull the new image ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            echo "üì• Pulling new image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # ‚îÄ‚îÄ 6) Run the new container ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            echo "üöÄ Starting new container on port $PORT..."
            docker run -d --restart always \
              -p 127.0.0.1:$PORT:$PORT \
              --name $CONTAINER_NAME \
              $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # ‚îÄ‚îÄ 7) Health check & rollback logic ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            echo "ü©∫ Performing health check..."
            sleep 5
            if curl -f http://localhost:$PORT/health; then
              echo "$IMAGE_TAG" > ~/previous_image_tag.txt
              echo "‚úÖ Deployment successful!"
            else
              echo "‚ùå Health check failed. Rolling back..."

              docker rm -f $CONTAINER_NAME || true

              if [ -f ~/previous_image_tag.txt ] && [ -n "$(cat ~/previous_image_tag.txt)" ]; then
                PREVIOUS_IMAGE_TAG=$(cat ~/previous_image_tag.txt)
                echo "‚è™ Rolling back to $PREVIOUS_IMAGE_TAG"
                docker run -d --restart always \
                  -p 127.0.0.1:$PORT:$PORT \
                  --name $CONTAINER_NAME \
                  $ECR_REGISTRY/$ECR_REPOSITORY:$PREVIOUS_IMAGE_TAG
              else
                echo "‚ö†Ô∏è No previous image found for rollback."
              fi

              exit 1
            fi
